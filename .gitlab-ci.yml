image: node:latest

default:
  before_script:
    - npm ci

cache:
  paths:
    - node_modules/

test:
  script:
    - npm run ci:test
  artifacts:
    paths:
      - output.json
      - coverage/*
    expire_in: 1 week

deploy:
  script:
    - npm install -g serverless
    - serverless config credentials --stage=prod --provider aws --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY}
    - npm run-script deploy -- --stage=prod  > deploy.txt
  artifacts:
    paths:
      - deploy.txt
    expire_in: 1 week
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v.*/

deploy_UAT:
  script:
    - npm install -g serverless
    - branch=$(echo ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} | sed s:hotfix/::g | sed s:bugfix/::g | sed s:feature/::g  | sed s:/:-:g | cut -c1-7 )
    - serverless config credentials --stage=$(echo $branch) --provider aws --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY}
    - npm run-script deploy -- --stage=$(echo $branch)  > deploy.txt
  only:
    - merge_requests
  artifacts:
    paths:
      - deploy.txt
    expire_in: 1 week

terminate:
  script:
    - npm install -g serverless
    - branch=$(echo ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} | sed s:hotfix/::g | sed s:bugfix/::g | sed s:feature/::g  | sed s:/:-:g | cut -c1-7 )
    - serverless config credentials --stage=$(echo $branch) --provider aws --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY}
    - npm run-script remove -- --stage=$(echo $branch)  > remove.txt
  when: manual
  only:
    - merge_requests
  artifacts:
    paths:
      - remove.txt
    expire_in: 1 week
